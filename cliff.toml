# git-cliff configuration file
# https://git-cliff.org/docs/configuration

[changelog]

header = """
# Changelog\n\n
"""

body = """
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim }}
    {% for commit in commits %}
        - [`{{ commit.id | truncate(length=7, end="") }}`](<REPO>/commit/{{ commit.id }}) \
          {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
          {% if commit.breaking %}**[breaking]** {% endif %}\
          {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""

footer = "<!-- generated by git-cliff -->"

# remove the leading and trailing whitespace from the templates
trim = true

# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/nyg/kraken-api-java" }
]


[git]

# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = false

# process each line of a commit as an individual commit
split_commits = false

# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
    { pattern = ' #([0-9]+) ', replace = " [#${1}](<REPO>/issues/${1}) " }
]

# regex for parsing and grouping commits
commit_parsers = [
    { message = "^security", group = "<!-- 0 -->🛡️ Security" },
    { message = "^feat", group = "<!-- 1 -->⛰️  Features" },
    { message = "^fix", group = "<!-- 2 -->🐛 Bug Fixes" },
    { message = "^refactor", group = "<!-- 3 -->🚜 Refactor" },
    { message = "^doc", group = "<!-- 4 -->📚 Documentation" },
    { message = "^perf", group = "<!-- 5 -->⚡ Performance" },
    { message = "^style", group = "<!-- 6 -->🎨 Styling" },
    { message = "^test", group = "<!-- 7 -->🧪 Testing" },
    { message = "^chore\\(release\\):", skip = true },
    { message = "^(chore|ci|build)", group = "<!-- 8 -->⚙️ Miscellaneous" },
    { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
    { message = ".*", group = "Others" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# filter out the commits that are not matched by commit parsers
filter_commits = false

# regex for matching git tags
tag_pattern = "v[0-9].*"

# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
